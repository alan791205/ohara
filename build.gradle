/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "com.diffplug.gradle.spotless" version "3.15.0"
  id "com.github.hierynomus.license" version"0.15.0"
}

allprojects {
  repositories {
    mavenCentral()
  }
}

apply plugin: "com.github.hierynomus.license"

def needHeaders() {
  return [
    fileTree(dir: ".").include("**/*.java"),
    fileTree(dir: ".").include("**/*.scala"),
    fileTree(dir: ".").include("**/*.sh"),
    fileTree(dir: ".").include("**/*.properties"),
    fileTree(dir: ".").include("**/*.js"),
    fileTree(dir: ".").include("**/*.dockerfile"),
    fileTree(dir: ".").include("**/*.conf"),
    fileTree(dir: ".").include("**/*.gradle"),
    fileTree(dir: ".").include("**/*.yaml"),
    fileTree(dir: ".").include("**/*.yml")
  ]
}

task licenseApply(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
  source(needHeaders())
}

task licenseTest(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
  source(needHeaders())
}


license {
  header = file("$rootDir/checkstyle/apacheV2.header")
  strictCheck true
  // VersionUtil.java is generated at runtime and its source code isn't public. Hence, we don't add header to it.
  excludes(["**/VersionUtil.java",
            ".gradle",
            ".git",
            ".idea",
            "**/target",
            "**/build",
            "ohara-manager/**/node_modules",
            "ohara-manager/**/coverage"
  ])
  // http://code.mycila.com/license-maven-plugin/#supported-comment-types
  mapping {
    js='JAVADOC_STYLE'
    scala='JAVADOC_STYLE'
    gradle='JAVADOC_STYLE'
    dockerfile='SCRIPT_STYLE'
    dockerfile='SCRIPT_STYLE'
    conf='SCRIPT_STYLE'
    yaml='SCRIPT_STYLE'
    yml='SCRIPT_STYLE'
  }
  // NOTED: we use spotless to format our code so the format of header must be valid to spotless!
  headerDefinitions {
    javadoc_style {
      firstLine = "/*"
      beforeEachLine = " * "
      // joshua's wish...
      endLine   = " */EOL"
      firstLineDetectionPattern = "/*"
      lastLineDetectionPattern  = " */"
      allowBlankLines = false
      isMultiline = true
    }
  }
}

check {
  dependsOn licenseTest
}

subprojects {
  if (it.name != 'ohara-manager') {
    if (it.name == 'ohara-common' || it.name == 'ohara-kafka' || it.name == 'ohara-testing-util' || it.name == 'ohara-streams') {
      apply plugin: 'java'
      sourceCompatibility = 1.8
      targetCompatibility = 1.8
    }
    else apply plugin: 'scala'

    /**
     * The tests in ohara-it are fucking heavy so it would be better to verify them one by one.
     * TODO: Increase the number of forks if we buy a fucking super machine for QA
     */
    int numberOfForks = it.name == 'ohara-it' ? 1 :
            project.hasProperty('maxParallelForks') ? maxParallelForks.toInteger() :
                    Math.max((int) (Runtime.runtime.availableProcessors() / 2), 1)
    test {
      maxParallelForks = numberOfForks
      // make isolation for tests. It may be expensive but stability is first choice.
      forkEvery = 1
      minHeapSize = "256m"
      maxHeapSize = "4096m"
      testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
      }
    }
    tasks.withType(JavaCompile) {
      options.encoding = 'UTF-8'
      options.compilerArgs += ["-Xlint:all", "-Werror"]
    }
  }

  // ohara-manager doesn't generate test.jar
  if (it.name != 'ohara-manager') {
    configurations {
      tests.extendsFrom archives
    }
    task testJar(type: Jar, dependsOn: testClasses) {
      classifier = 'tests'
      from sourceSets.test.output
    }
    artifacts {
      archives testJar
    }
  }

  // All sub-projects have been applied the java or scala checkstyle.
  if (it.name != 'ohara-manager') {
    apply plugin: "com.diffplug.gradle.spotless"
    if (it.name == 'ohara-common' || it.name == 'ohara-testing-util'||it.name=='ohara-kafka' || it.name == 'ohara-streams') {
      spotless {
        java {
          googleJavaFormat()
          removeUnusedImports()
        }
      }
    } else {
      spotless {
        scala {
          // DON'T change the scalafmt version since the rules may be changed in newer version.
          scalafmt("1.5.1").configFile("$rootDir/checkstyle/.scalafmt.conf")
        }
      }
    }
  }

  // we put some test case in ohara-assembly so those compiler options should be added to ohara-assembly also.
  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
      // Scala Compiler Options
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/StandardScalaSettings.scala
      // https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala
      "-deprecation",
      "-unchecked",
      "-encoding", "utf8",
      "-Xlog-reflective-calls",
      "-feature",
      "-language:postfixOps",
      "-language:implicitConversions",
      "-language:existentials",
      "-target:jvm-1.8",
      "-explaintypes",
      "-feature",
      "-unchecked",
      // -Xlint enables all -Xlint:xxx checks.
      // see https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/Warnings.scala#L60
      "-Xlint",
      "-Ywarn-dead-code",
      "-Ywarn-unused-import",
      "-Xfatal-warnings"
    ]

    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxMetaspaceSize=512m']
    }
  }
}


